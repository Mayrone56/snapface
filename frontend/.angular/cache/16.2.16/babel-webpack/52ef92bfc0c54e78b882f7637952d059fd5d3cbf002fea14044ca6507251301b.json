{"ast":null,"code":"import { interval, Subject } from 'rxjs';\nimport { take, takeUntil, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/face-snaps.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../face-snap/face-snap.component\";\nfunction FaceSnapListComponent_app_face_snap_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-face-snap\", 2);\n  }\n  if (rf & 2) {\n    const faceSnapElementInArray_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"faceSnap\", faceSnapElementInArray_r1);\n  }\n}\nexport class FaceSnapListComponent {\n  // Injection du service dans le constructeur\n  constructor(faceSnapsService) {\n    this.faceSnapsService = faceSnapsService;\n  }\n  ngOnInit() {\n    // Etape 2\n    this.destroy$ = new Subject();\n    // Il faut ensuite initialiser  destroy$  dans  ngOnInit()\n    // this.faceSnaps = this.faceSnapsService.faceSnaps;\n    this.faceSnaps$ = this.faceSnapsService.getAllFaceSnaps();\n    interval(1000).pipe(take(3),\n    // tap(value => console.log(value))\n    //Facon plus courte de l'ecrire\n    tap(console.log),\n    // Etape 4\n    // Cet opérateur dit à l'Observable  interval  de continuer à émettre tant que  destroy$  n'a pas émis\n    // Mais dès que  destroy$  émet, de compléter l'Observable.\n    takeUntil(this.destroy$)).subscribe();\n  }\n  // Etape 3\n  // La norme est d'ajouter ngOnDestroy à la fin de la classe\n  ngOnDestroy() {\n    // La dernière étape de la création de  destroy$  est de le faire émettre dans  ngOnDestroy()\n    // Pour faire émettre un Subject, on appelle sa méthode  next()  :\n    this.destroy$.next(true);\n  }\n  static {\n    this.ɵfac = function FaceSnapListComponent_Factory(t) {\n      return new (t || FaceSnapListComponent)(i0.ɵɵdirectiveInject(i1.FaceSnapsService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FaceSnapListComponent,\n      selectors: [[\"app-face-snap-list\"]],\n      decls: 5,\n      vars: 3,\n      consts: [[2, \"text-align\", \"center\"], [3, \"faceSnap\", 4, \"ngFor\", \"ngForOf\"], [3, \"faceSnap\"]],\n      template: function FaceSnapListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1, \"Liste de FaceSnaps\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"main\");\n          i0.ɵɵtemplate(3, FaceSnapListComponent_app_face_snap_3_Template, 1, 1, \"app-face-snap\", 1);\n          i0.ɵɵpipe(4, \"async\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(4, 1, ctx.faceSnaps$));\n        }\n      },\n      dependencies: [i2.NgForOf, i3.FaceSnapComponent, i2.AsyncPipe],\n      styles: [\"main[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 16px;\\n  justify-content: center;\\n  align-items: flex-start;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmFjZS1zbmFwLWxpc3QvZmFjZS1zbmFwLWxpc3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsZUFBQTtFQUNBLFNBQUE7RUFDQSx1QkFBQTtFQUNBLHVCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJtYWluIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtd3JhcDogd3JhcDtcclxuICBnYXA6IDE2cHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["interval","Subject","take","takeUntil","tap","i0","ɵɵelement","ɵɵproperty","faceSnapElementInArray_r1","FaceSnapListComponent","constructor","faceSnapsService","ngOnInit","destroy$","faceSnaps$","getAllFaceSnaps","pipe","console","log","subscribe","ngOnDestroy","next","ɵɵdirectiveInject","i1","FaceSnapsService","selectors","decls","vars","consts","template","FaceSnapListComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","FaceSnapListComponent_app_face_snap_3_Template","ɵɵadvance","ɵɵpipeBind1"],"sources":["C:\\Users\\User\\Work\\Tuto\\Openclassrooms\\snapface\\frontend\\src\\app\\face-snap-list\\face-snap-list.component.ts","C:\\Users\\User\\Work\\Tuto\\Openclassrooms\\snapface\\frontend\\src\\app\\face-snap-list\\face-snap-list.component.html"],"sourcesContent":["// FaceSnapList sert de parent à FaceSnap, c'est lui qui liste\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FaceSnap } from '../models/face-snap.model';\n\n//Permet d'utiliser un service dans un component, c'est une injection de dependance\nimport { FaceSnapsService } from '../services/face-snaps.service';\nimport { interval, Observable, Subject } from 'rxjs';\nimport { take, takeUntil, tap, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-face-snap-list',\n  templateUrl: './face-snap-list.component.html',\n  styleUrls: ['./face-snap-list.component.scss'],\n})\nexport class FaceSnapListComponent implements OnInit, OnDestroy {\n  //Déclaration de variables\n  faceSnaps$!: Observable<FaceSnap[]>;\n  // Etape 1 pour la desctruction de l'Observable\n  // Un Subject est un Observable qu'on peut faire émettre à la demande\n  // Il émettra une seule fois, au moment de la destruction du component.\n  private destroy$!: Subject<boolean>;\n\n  // Injection du service dans le constructeur\n  constructor(private faceSnapsService: FaceSnapsService) {}\n\n  ngOnInit() {\n    // Etape 2\n    this.destroy$ = new Subject<boolean>();\n    // Il faut ensuite initialiser  destroy$  dans  ngOnInit()\n\n    // this.faceSnaps = this.faceSnapsService.faceSnaps;\n    this.faceSnaps$ = this.faceSnapsService.getAllFaceSnaps();\n\n    interval(1000)\n      .pipe(\n        take(3),\n        // tap(value => console.log(value))\n        //Facon plus courte de l'ecrire\n        tap(console.log),\n        // Etape 4\n        // Cet opérateur dit à l'Observable  interval  de continuer à émettre tant que  destroy$  n'a pas émis\n        // Mais dès que  destroy$  émet, de compléter l'Observable.\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  // Etape 3\n  // La norme est d'ajouter ngOnDestroy à la fin de la classe\n  ngOnDestroy() {\n    // La dernière étape de la création de  destroy$  est de le faire émettre dans  ngOnDestroy()\n    // Pour faire émettre un Subject, on appelle sa méthode  next()  :\n    this.destroy$.next(true);\n  }\n}\n","<h2 style=\"text-align: center\">Liste de FaceSnaps</h2>\n<main>\n  <app-face-snap\n    *ngFor=\"let faceSnapElementInArray of faceSnaps$ | async\"\n    [faceSnap]=\"faceSnapElementInArray\"\n  >\n  </app-face-snap>\n</main>\n"],"mappings":"AAMA,SAASA,QAAQ,EAAcC,OAAO,QAAQ,MAAM;AACpD,SAASC,IAAI,EAAEC,SAAS,EAAEC,GAAG,QAAa,gBAAgB;;;;;;;ICLxDC,EAAA,CAAAC,SAAA,uBAIgB;;;;IAFdD,EAAA,CAAAE,UAAA,aAAAC,yBAAA,CAAmC;;;ADUvC,OAAM,MAAOC,qBAAqB;EAQhC;EACAC,YAAoBC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;EAAqB;EAEzDC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,QAAQ,GAAG,IAAIZ,OAAO,EAAW;IACtC;IAEA;IACA,IAAI,CAACa,UAAU,GAAG,IAAI,CAACH,gBAAgB,CAACI,eAAe,EAAE;IAEzDf,QAAQ,CAAC,IAAI,CAAC,CACXgB,IAAI,CACHd,IAAI,CAAC,CAAC,CAAC;IACP;IACA;IACAE,GAAG,CAACa,OAAO,CAACC,GAAG,CAAC;IAChB;IACA;IACA;IACAf,SAAS,CAAC,IAAI,CAACU,QAAQ,CAAC,CACzB,CACAM,SAAS,EAAE;EAChB;EAEA;EACA;EACAC,WAAWA,CAAA;IACT;IACA;IACA,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC,IAAI,CAAC;EAC1B;;;uBAvCWZ,qBAAqB,EAAAJ,EAAA,CAAAiB,iBAAA,CAAAC,EAAA,CAAAC,gBAAA;IAAA;EAAA;;;YAArBf,qBAAqB;MAAAgB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCdlC1B,EAAA,CAAA4B,cAAA,YAA+B;UAAA5B,EAAA,CAAA6B,MAAA,yBAAkB;UAAA7B,EAAA,CAAA8B,YAAA,EAAK;UACtD9B,EAAA,CAAA4B,cAAA,WAAM;UACJ5B,EAAA,CAAA+B,UAAA,IAAAC,8CAAA,2BAIgB;;UAClBhC,EAAA,CAAA8B,YAAA,EAAO;;;UAJgC9B,EAAA,CAAAiC,SAAA,GAAqB;UAArBjC,EAAA,CAAAE,UAAA,YAAAF,EAAA,CAAAkC,WAAA,OAAAP,GAAA,CAAAlB,UAAA,EAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}