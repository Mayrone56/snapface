{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//Decodeur @Injectable qui permet de déclarer une classe comme etant un service\nexport class FaceSnapsService {\n  constructor(http) {\n    this.http = http;\n    this.faceSnaps = [];\n  }\n  // Disponible maintenant via le backend\n  // faceSnaps: FaceSnap[] = [\n  //   {\n  //     // Ajout de l'id qui est implémenté dans le model\n  //     id: 1,\n  //     title: 'Hey Mario !',\n  //     description: 'Mon meilleur ami depuis tout petit !',\n  //     imageUrl:\n  //       'https://images.unsplash.com/photo-1622038492302-9e476cc5a584?q=80&w=1931&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  //     createdDate: new Date(),\n  //     snaps: 3,\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Archibald',\n  //     description: 'Mon meilleur ami depuis tout petit !',\n  //     imageUrl:\n  //       'https://cdn.pixabay.com/photo/2015/05/31/16/03/teddy-bear-792273_1280.jpg',\n  //     createdDate: new Date(),\n  //     snaps: 10,\n  //   },\n  //   {\n  //     id: 3,\n  //     title: 'Robot',\n  //     description: 'Mon petit robot',\n  //     imageUrl:\n  //       'https://images.unsplash.com/photo-1691085397730-08669edab7fa?q=80&w=2029&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  //     createdDate: new Date(),\n  //     snaps: 200,\n  //     // La location ne s'affichera pas car il y a une condition qui dit afficher uniquement si Paris dans face-snap.component.html pour la location\n  //     location: 'Lyon',\n  //   },\n  //   {\n  //     id: 4,\n  //     title: 'Lego',\n  //     description: 'Fan de Lego',\n  //     imageUrl:\n  //       'https://images.unsplash.com/photo-1472457897821-70d3819a0e24?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n  //     createdDate: new Date(),\n  //     snaps: 300,\n  //     location: 'Paris',\n  //   },\n  // ];\n  // Cherche un FaceSnap par son id dans le tableau faceSnaps avec la fonction find() ;\n  // Si le FaceSnap existe, on lui incrémente ses snaps ;\n  // Sinon, on throw une erreur.\n  // likeFaceSnapById(faceSnapId: number): void {\n  //   const faceSnap = this.faceSnaps.find((faceSnap) => faceSnap.id === id);\n  //   if (faceSnap) {\n  //     faceSnap.snaps++;\n  //   } else {\n  //     throw new Error('FaceSnap not found!');\n  //   }\n  // }\n  // unlikeFaceSnapById(faceSnapId: number): void {\n  //   const faceSnap = this.faceSnaps.find((faceSnap) => faceSnap.id === id);\n  //   if (faceSnap) {\n  //     faceSnap.snaps--;\n  //   } else {\n  //     throw new Error('FaceSnap not found!');\n  //   }\n  // }\n  // Cette méthode retournera, comme son nom l'indique, tous les FaceSnaps contenus dans le service.\n  // La methode suivi de : FaceSnap[] permet de stipuler en Typescript le type, ici un tableau\n  // Il faudra centraliser toutes les interactions avec les FaceSnaps dans FaceSnapsService\n  getAllFaceSnaps() {\n    return this.http.get('http://localhost:3000/facesnaps');\n  }\n  // Méthode pour obtenir un FaceSnap par son id\n  // Commenté pour httpClient\n  // getFaceSnapById(faceSnapId: number): FaceSnap {\n  //   // const foundFaceSnap = this.faceSnaps.find((faceSnap) =>\n  //   //   console.log('facesnap.id', faceSnap.id)\n  //   // );\n  //   const foundFaceSnap = this.faceSnaps.find(\n  //     (faceSnap) => faceSnap.id === faceSnapId\n  //   );\n  //   console.log('foundFaceSnap;:', faceSnapId);\n  //   if (!foundFaceSnap) {\n  //     throw new Error('FaceSnap not found!');\n  //   } else {\n  //     return foundFaceSnap;\n  //   }\n  // }\n  getFaceSnapById(faceSnapId) {\n    return this.http.get(`http://localhost:3000/facesnaps/${faceSnapId}`);\n  }\n  // Méthode pour \"snapper\" ou \"unsnapper\" un FaceSnap par id\n  // Il y a 2 arguments, l'id d'un snap et s'il snap ou unsnap. One le retrouve dans face-snap-component\n  // (id: number, snapType: 'snap' | 'unsnap') sagit d'un literal type\n  // Qui permet de passer directement une chaine de caractere et limiter les possibilités\n  likeFaceSnapById(faceSnapId, snapType) {\n    // const faceSnap = this.getFaceSnapById(faceSnapId);\n    // if (snapType === 'like') {\n    //   faceSnap.snaps++;\n    //   // Dans le github car il c'est implémenté en isLiked = boolean, nous ce sont des number et en dur\n    //   // faceSnap.isSnapped = true;\n    // } else {\n    //   faceSnap.snaps--;\n    // }\n  }\n  addFaceSnap(formValue) {\n    const faceSnap = {\n      ...formValue,\n      snaps: 0,\n      createdDate: new Date(),\n      // Ajoute 1 à l' id  du dernier ajouté au tableau pour générer le nouveau, puisque les  id  des FaceSnap sont des entiers croissants ;\n      id: this.faceSnaps[this.faceSnaps.length - 1].id + 1\n    };\n    // Ajoute le FaceSnap au tableau.\n    this.faceSnaps.push(faceSnap);\n  }\n  static {\n    this.ɵfac = function FaceSnapsService_Factory(t) {\n      return new (t || FaceSnapsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FaceSnapsService,\n      factory: FaceSnapsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["FaceSnapsService","constructor","http","faceSnaps","getAllFaceSnaps","get","getFaceSnapById","faceSnapId","likeFaceSnapById","snapType","addFaceSnap","formValue","faceSnap","snaps","createdDate","Date","id","length","push","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\User\\Work\\Tuto\\Openclassrooms\\snapface\\frontend\\src\\app\\services\\face-snaps.service.ts"],"sourcesContent":["// Permet d'utiliser le decorateur @Injectable\r\nimport { Injectable } from '@angular/core';\r\nimport { FaceSnap } from '../models/face-snap.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n//Decodeur @Injectable qui permet de déclarer une classe comme etant un service\r\n@Injectable({\r\n  //Dit à Angular d'enregistrer à la racine  le service, ça permet de n'avoir qu'une seule instance du service partagée à toute l'app\r\n  providedIn: 'root',\r\n})\r\nexport class FaceSnapsService {\r\n  constructor(private http: HttpClient) {}\r\n  faceSnaps: FaceSnap[] = [];\r\n  // Disponible maintenant via le backend\r\n  // faceSnaps: FaceSnap[] = [\r\n  //   {\r\n  //     // Ajout de l'id qui est implémenté dans le model\r\n  //     id: 1,\r\n  //     title: 'Hey Mario !',\r\n  //     description: 'Mon meilleur ami depuis tout petit !',\r\n  //     imageUrl:\r\n  //       'https://images.unsplash.com/photo-1622038492302-9e476cc5a584?q=80&w=1931&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n  //     createdDate: new Date(),\r\n  //     snaps: 3,\r\n  //   },\r\n  //   {\r\n  //     id: 2,\r\n  //     title: 'Archibald',\r\n  //     description: 'Mon meilleur ami depuis tout petit !',\r\n  //     imageUrl:\r\n  //       'https://cdn.pixabay.com/photo/2015/05/31/16/03/teddy-bear-792273_1280.jpg',\r\n  //     createdDate: new Date(),\r\n  //     snaps: 10,\r\n  //   },\r\n  //   {\r\n  //     id: 3,\r\n  //     title: 'Robot',\r\n  //     description: 'Mon petit robot',\r\n  //     imageUrl:\r\n  //       'https://images.unsplash.com/photo-1691085397730-08669edab7fa?q=80&w=2029&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n  //     createdDate: new Date(),\r\n  //     snaps: 200,\r\n  //     // La location ne s'affichera pas car il y a une condition qui dit afficher uniquement si Paris dans face-snap.component.html pour la location\r\n  //     location: 'Lyon',\r\n  //   },\r\n  //   {\r\n  //     id: 4,\r\n  //     title: 'Lego',\r\n  //     description: 'Fan de Lego',\r\n  //     imageUrl:\r\n  //       'https://images.unsplash.com/photo-1472457897821-70d3819a0e24?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n  //     createdDate: new Date(),\r\n  //     snaps: 300,\r\n  //     location: 'Paris',\r\n  //   },\r\n  // ];\r\n\r\n  // Cherche un FaceSnap par son id dans le tableau faceSnaps avec la fonction find() ;\r\n  // Si le FaceSnap existe, on lui incrémente ses snaps ;\r\n  // Sinon, on throw une erreur.\r\n  // likeFaceSnapById(faceSnapId: number): void {\r\n  //   const faceSnap = this.faceSnaps.find((faceSnap) => faceSnap.id === id);\r\n  //   if (faceSnap) {\r\n  //     faceSnap.snaps++;\r\n  //   } else {\r\n  //     throw new Error('FaceSnap not found!');\r\n  //   }\r\n  // }\r\n  // unlikeFaceSnapById(faceSnapId: number): void {\r\n  //   const faceSnap = this.faceSnaps.find((faceSnap) => faceSnap.id === id);\r\n  //   if (faceSnap) {\r\n  //     faceSnap.snaps--;\r\n  //   } else {\r\n  //     throw new Error('FaceSnap not found!');\r\n  //   }\r\n  // }\r\n\r\n  // Cette méthode retournera, comme son nom l'indique, tous les FaceSnaps contenus dans le service.\r\n  // La methode suivi de : FaceSnap[] permet de stipuler en Typescript le type, ici un tableau\r\n  // Il faudra centraliser toutes les interactions avec les FaceSnaps dans FaceSnapsService\r\n  getAllFaceSnaps(): Observable<FaceSnap[]> {\r\n    return this.http.get<FaceSnap[]>('http://localhost:3000/facesnaps');\r\n  }\r\n\r\n  // Méthode pour obtenir un FaceSnap par son id\r\n  // Commenté pour httpClient\r\n  // getFaceSnapById(faceSnapId: number): FaceSnap {\r\n  //   // const foundFaceSnap = this.faceSnaps.find((faceSnap) =>\r\n  //   //   console.log('facesnap.id', faceSnap.id)\r\n  //   // );\r\n  //   const foundFaceSnap = this.faceSnaps.find(\r\n  //     (faceSnap) => faceSnap.id === faceSnapId\r\n  //   );\r\n  //   console.log('foundFaceSnap;:', faceSnapId);\r\n  //   if (!foundFaceSnap) {\r\n  //     throw new Error('FaceSnap not found!');\r\n  //   } else {\r\n  //     return foundFaceSnap;\r\n  //   }\r\n  // }\r\n\r\n  getFaceSnapById(faceSnapId: number): Observable<FaceSnap> {\r\n    return this.http.get<FaceSnap>(\r\n      `http://localhost:3000/facesnaps/${faceSnapId}`\r\n    );\r\n  }\r\n\r\n  // Méthode pour \"snapper\" ou \"unsnapper\" un FaceSnap par id\r\n  // Il y a 2 arguments, l'id d'un snap et s'il snap ou unsnap. One le retrouve dans face-snap-component\r\n  // (id: number, snapType: 'snap' | 'unsnap') sagit d'un literal type\r\n  // Qui permet de passer directement une chaine de caractere et limiter les possibilités\r\n  likeFaceSnapById(faceSnapId: number, snapType: 'like' | 'unlike'): void {\r\n    // const faceSnap = this.getFaceSnapById(faceSnapId);\r\n    // if (snapType === 'like') {\r\n    //   faceSnap.snaps++;\r\n    //   // Dans le github car il c'est implémenté en isLiked = boolean, nous ce sont des number et en dur\r\n    //   // faceSnap.isSnapped = true;\r\n    // } else {\r\n    //   faceSnap.snaps--;\r\n    // }\r\n  }\r\n\r\n  addFaceSnap(formValue: {\r\n    title: string;\r\n    description: string;\r\n    imageUrl: string;\r\n    location?: string;\r\n  }) {\r\n    const faceSnap: FaceSnap = {\r\n      ...formValue,\r\n      snaps: 0,\r\n      createdDate: new Date(),\r\n      // Ajoute 1 à l' id  du dernier ajouté au tableau pour générer le nouveau, puisque les  id  des FaceSnap sont des entiers croissants ;\r\n      id: this.faceSnaps[this.faceSnaps.length - 1].id + 1,\r\n    };\r\n    // Ajoute le FaceSnap au tableau.\r\n    this.faceSnaps.push(faceSnap);\r\n  }\r\n}\r\n"],"mappings":";;AAMA;AAKA,OAAM,MAAOA,gBAAgB;EAC3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB,KAAAC,SAAS,GAAe,EAAE;EADa;EAEvC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,iCAAiC,CAAC;EACrE;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,eAAeA,CAACC,UAAkB;IAChC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAClB,mCAAmCE,UAAU,EAAE,CAChD;EACH;EAEA;EACA;EACA;EACA;EACAC,gBAAgBA,CAACD,UAAkB,EAAEE,QAA2B;IAC9D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EAGFC,WAAWA,CAACC,SAKX;IACC,MAAMC,QAAQ,GAAa;MACzB,GAAGD,SAAS;MACZE,KAAK,EAAE,CAAC;MACRC,WAAW,EAAE,IAAIC,IAAI,EAAE;MACvB;MACAC,EAAE,EAAE,IAAI,CAACb,SAAS,CAAC,IAAI,CAACA,SAAS,CAACc,MAAM,GAAG,CAAC,CAAC,CAACD,EAAE,GAAG;KACpD;IACD;IACA,IAAI,CAACb,SAAS,CAACe,IAAI,CAACN,QAAQ,CAAC;EAC/B;;;uBA/HWZ,gBAAgB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAhBtB,gBAAgB;MAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}