{"ast":null,"code":"// FormBuilder est un serivce mis à disposition par Angular qui facilite largement la création des formulaires réactifs\nimport { Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/face-snaps.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction NewFaceSnapComponent_div_25_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const faceSnap_r1 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Photo prise \\u00E0 \", faceSnap_r1.location, \" \");\n  }\n}\nfunction NewFaceSnapComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"uppercase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"img\", 15);\n    i0.ɵɵelementStart(8, \"p\");\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"titlecase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, NewFaceSnapComponent_div_25_p_11_Template, 2, 1, \"p\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const faceSnap_r1 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 6, faceSnap_r1.title));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Mise en ligne le \", i0.ɵɵpipeBind2(6, 8, faceSnap_r1.createdDate, \"longDate\"), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", faceSnap_r1.imageUrl, i0.ɵɵsanitizeUrl)(\"alt\", faceSnap_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 11, faceSnap_r1.description));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", faceSnap_r1.location === \"Paris\");\n  }\n}\nexport class NewFaceSnapComponent {\n  constructor(formBuilder, faceSnapServices, router) {\n    this.formBuilder = formBuilder;\n    this.faceSnapServices = faceSnapServices;\n    this.router = router;\n  }\n  ngOnInit() {\n    // Construction du formulaire avec formBuilder\n    // [Validators.required] required est une fonction qui passe comme argement du coup on ne met pas de ()\n    this.snapForm = this.formBuilder.group({\n      title: [null, [Validators.required]],\n      description: [null, [Validators.required]],\n      imageUrl: [null,\n      // pattern est un Validator qui prend un argument, donc on doit lui ajouter les parenthèses, contrairement à required\n      [Validators.required, Validators.pattern(this.urlRegex)]],\n      location: [null]\n    }, {\n      updateOn: 'blur'\n    });\n    this.faceSnapPreview$ = this.snapForm.valueChanges.pipe(\n    // Ici map((formValue) => ({}) si on veut retourner un obj on doit mettre l'obj entre () sinon croit que c'est une fonction\n    map(formValue => ({\n      ...formValue,\n      createdDate: new Date(),\n      snaps: 0,\n      id: 0\n    })));\n    this.urlRegex = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)/;\n  }\n  // Comme avec les formulaires template, vous accédez au contenu du formulaire avec l'attribut  value  .\n  onSubmitForm() {\n    console.log(this.snapForm.value);\n    this.faceSnapServices.addFaceSnap(this.snapForm.value);\n    this.router.navigateByUrl('/facesnaps');\n  }\n  static {\n    this.ɵfac = function NewFaceSnapComponent_Factory(t) {\n      return new (t || NewFaceSnapComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.FaceSnapsService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NewFaceSnapComponent,\n      selectors: [[\"app-new-face-snap\"]],\n      decls: 27,\n      vars: 5,\n      consts: [[1, \"form-card\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"title\"], [\"id\", \"title\", \"type\", \"text\", \"formControlName\", \"title\"], [\"for\", \"description\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", \"rows\", \"4\"], [\"for\", \"imageUrl\"], [\"id\", \"imageUrl\", \"type\", \"text\", \"formControlName\", \"imageUrl\"], [\"for\", \"location\"], [\"id\", \"location\", \"type\", \"text\", \"formControlName\", \"location\"], [1, \"action-buttons\"], [\"type\", \"submit\", 3, \"disabled\", \"click\"], [\"class\", \"face-snap-card\", 4, \"ngIf\"], [1, \"face-snap-card\"], [3, \"src\", \"alt\"], [4, \"ngIf\"]],\n      template: function NewFaceSnapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"new-face-snap works!\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 0)(3, \"h2\");\n          i0.ɵɵtext(4, \"Nouveau FaceSnap\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"form\", 1)(6, \"div\", 2)(7, \"label\", 3);\n          i0.ɵɵtext(8, \"Titre\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"textarea\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 7);\n          i0.ɵɵtext(16, \"URL de l'image\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"div\", 2)(19, \"label\", 9);\n          i0.ɵɵtext(20, \"Lieu\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 11)(23, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function NewFaceSnapComponent_Template_button_click_23_listener() {\n            return ctx.onSubmitForm();\n          });\n          i0.ɵɵtext(24, \" Enregistrer \");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(25, NewFaceSnapComponent_div_25_Template, 12, 13, \"div\", 13);\n          i0.ɵɵpipe(26, \"async\");\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.snapForm);\n          i0.ɵɵadvance(18);\n          i0.ɵɵproperty(\"disabled\", ctx.snapForm.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(26, 3, ctx.faceSnapPreview$));\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.AsyncPipe, i4.UpperCasePipe, i4.TitleCasePipe, i4.DatePipe],\n      styles: [\".form-card[_ngcontent-%COMP%], .face-snap-card[_ngcontent-%COMP%] {\\n  box-sizing: border-box;\\n  width: 50%;\\n  margin: 20px auto;\\n  padding: 10px 30px;\\n  box-shadow: lightgray 4px 4px 20px;\\n}\\n\\n.face-snap-card[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n.face-snap-card[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  margin-bottom: 0;\\n}\\n.face-snap-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-weight: 300;\\n  font-size: 16px;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  margin: 10px auto;\\n  width: 80%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\ninput[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%] {\\n  width: 50%;\\n}\\n\\n.action-buttons[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n  display: block;\\n  margin: 20px auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmV3LWZhY2Utc25hcC9uZXctZmFjZS1zbmFwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFLHNCQUFBO0VBQ0EsVUFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQ0FBQTtBQUNGOztBQUdFO0VBQ0UsV0FBQTtBQUFKO0FBRUU7RUFDRSxnQkFBQTtBQUFKO0FBRUU7RUFDRSxnQkFBQTtFQUNBLGVBQUE7QUFBSjs7QUFJQTtFQUNFLGlCQUFBO0VBQ0EsVUFBQTtFQUNBLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDhCQUFBO0FBREY7O0FBSUE7O0VBRUUsVUFBQTtBQURGOztBQUlBO0VBQ0UsV0FBQTtBQURGOztBQUlBO0VBQ0UsY0FBQTtFQUNBLGlCQUFBO0FBREYiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1jYXJkLFxyXG4uZmFjZS1zbmFwLWNhcmQge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgd2lkdGg6IDUwJTtcclxuICBtYXJnaW46IDIwcHggYXV0bztcclxuICBwYWRkaW5nOiAxMHB4IDMwcHg7XHJcbiAgYm94LXNoYWRvdzogbGlnaHRncmF5IDRweCA0cHggMjBweDtcclxufVxyXG5cclxuLmZhY2Utc25hcC1jYXJkIHtcclxuICBpbWcge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gIGgyIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgfVxyXG4gIHAge1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICB9XHJcbn1cclxuXHJcbi5mb3JtLWdyb3VwIHtcclxuICBtYXJnaW46IDEwcHggYXV0bztcclxuICB3aWR0aDogODAlO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbn1cclxuXHJcbmlucHV0LFxyXG50ZXh0YXJlYSB7XHJcbiAgd2lkdGg6IDUwJTtcclxufVxyXG5cclxuLmFjdGlvbi1idXR0b25zIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuYnV0dG9uIHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBtYXJnaW46IDIwcHggYXV0bztcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","map","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","faceSnap_r1","location","ɵɵelement","ɵɵtemplate","NewFaceSnapComponent_div_25_p_11_Template","ɵɵtextInterpolate","ɵɵpipeBind1","title","ɵɵpipeBind2","createdDate","ɵɵproperty","imageUrl","ɵɵsanitizeUrl","description","NewFaceSnapComponent","constructor","formBuilder","faceSnapServices","router","ngOnInit","snapForm","group","required","pattern","urlRegex","updateOn","faceSnapPreview$","valueChanges","pipe","formValue","Date","snaps","id","onSubmitForm","console","log","value","addFaceSnap","navigateByUrl","ɵɵdirectiveInject","i1","FormBuilder","i2","FaceSnapsService","i3","Router","selectors","decls","vars","consts","template","NewFaceSnapComponent_Template","rf","ctx","ɵɵlistener","NewFaceSnapComponent_Template_button_click_23_listener","NewFaceSnapComponent_div_25_Template","invalid"],"sources":["C:\\Users\\User\\Work\\Tuto\\Openclassrooms\\snapface\\frontend\\src\\app\\new-face-snap\\new-face-snap.component.ts","C:\\Users\\User\\Work\\Tuto\\Openclassrooms\\snapface\\frontend\\src\\app\\new-face-snap\\new-face-snap.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n// FormBuilder est un serivce mis à disposition par Angular qui facilite largement la création des formulaires réactifs\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Observable, map } from 'rxjs';\nimport { FaceSnap } from '../models/face-snap.model';\nimport { FaceSnapsService } from '../services/face-snaps.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-new-face-snap',\n  templateUrl: './new-face-snap.component.html',\n  styleUrls: ['./new-face-snap.component.scss'],\n})\nexport class NewFaceSnapComponent implements OnInit {\n  // Variable qui contiendra l'objet du formulaire, son type est FormGroup (et non NgForm comme pour les formulaires template)\n  snapForm!: FormGroup;\n  faceSnapPreview$!: Observable<FaceSnap>;\n  urlRegex!: RegExp;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private faceSnapServices: FaceSnapsService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    // Construction du formulaire avec formBuilder\n    // [Validators.required] required est une fonction qui passe comme argement du coup on ne met pas de ()\n    this.snapForm = this.formBuilder.group(\n      {\n        title: [null, [Validators.required]],\n        description: [null, [Validators.required]],\n        imageUrl: [\n          null,\n          // pattern est un Validator qui prend un argument, donc on doit lui ajouter les parenthèses, contrairement à required\n          [Validators.required, Validators.pattern(this.urlRegex)],\n        ],\n        location: [null],\n      },\n      {\n        updateOn: 'blur',\n      }\n    );\n    this.faceSnapPreview$ = this.snapForm.valueChanges.pipe(\n      // Ici map((formValue) => ({}) si on veut retourner un obj on doit mettre l'obj entre () sinon croit que c'est une fonction\n      map((formValue) => ({\n        ...formValue,\n        createdDate: new Date(),\n        snaps: 0,\n        id: 0,\n      }))\n    );\n    this.urlRegex =\n      /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)/;\n  }\n  // Comme avec les formulaires template, vous accédez au contenu du formulaire avec l'attribut  value  .\n  onSubmitForm() {\n    console.log(this.snapForm.value);\n    this.faceSnapServices.addFaceSnap(this.snapForm.value);\n    this.router.navigateByUrl('/facesnaps');\n  }\n}\n","<p>new-face-snap works!</p>\n\n<div class=\"form-card\">\n  <h2>Nouveau FaceSnap</h2>\n\n  <!-- Formulaire réactif Angular lié à un objet de type FormGroup -->\n  <!-- Le fait d'importer `ReactiveFormsModule` dans le module Angular permet de créer des formulaires réactifs. -->\n  <!-- L'attribut `[formGroup]=\"snapForm\"` lie le formulaire à une instance de `FormGroup` définie dans le composant TypeScript. -->\n  <!-- [formGroup] : Il s'agit d'une directive utilisée pour lier un formulaire HTML à un FormGroup dans Angular. -->\n  <form [formGroup]=\"snapForm\">\n    <div class=\"form-group\">\n      <label for=\"title\">Titre</label>\n      <!-- Le champ de texte est lié au contrôle de formulaire `title` via `formControlName=\"title\"`. -->\n      <!-- Cela associe l'input au contrôle `title` dans l'objet `FormGroup` appelé `snapForm`. -->\n      <!-- formControlName=\"title\" : Ce champ est lié au contrôle de formulaire nommé title dans le FormGroup -->\n      <!-- Les données saisies par l'utilisateur sont automatiquement gérées par Angular dans le cadre du formulaire réactif. -->\n      <input id=\"title\" type=\"text\" formControlName=\"title\" />\n    </div>\n\n    <!-- Champ pour la description du FaceSnap -->\n    <div class=\"form-group\">\n      <label for=\"description\">Description</label>\n      <!-- Le champ de texte est lié au contrôle `description` du `FormGroup`. -->\n      <!-- Ici, on utilise un `textarea` pour permettre une saisie multi-ligne avec `rows=\"4\"`. -->\n      <textarea\n        id=\"description\"\n        type=\"text\"\n        formControlName=\"description\"\n        rows=\"4\"\n      ></textarea>\n    </div>\n\n    <!-- Champ pour l'URL de l'image du FaceSnap -->\n    <div class=\"form-group\">\n      <label for=\"imageUrl\">URL de l'image</label>\n      <!-- L'input pour saisir l'URL de l'image est lié au contrôle `imageUrl` via `formControlName=\"imageUrl\"`. -->\n      <!-- Le contrôle `imageUrl` est géré dans le `FormGroup` du composant TypeScript. -->\n      <input id=\"imageUrl\" type=\"text\" formControlName=\"imageUrl\" />\n    </div>\n\n    <!-- Champ pour saisir le lieu du FaceSnap -->\n    <div class=\"form-group\">\n      <label for=\"location\">Lieu</label>\n      <!-- L'input pour saisir le lieu est lié au contrôle `location` via `formControlName=\"location\"`. -->\n      <!-- Ce champ permet à l'utilisateur d'indiquer un lieu géographique associé à son FaceSnap. -->\n      <input id=\"location\" type=\"text\" formControlName=\"location\" />\n    </div>\n\n    <!-- Bouton pour soumettre le formulaire -->\n    <div class=\"action-buttons\">\n      <!-- Le bouton de soumission ne soumet pas le formulaire par défaut -->\n      <!-- L'événement `(click)` appelle la méthode `onSubmitForm()` dans le composant TypeScript. -->\n      <!-- C'est cette méthode qui va traiter et valider les données du formulaire. -->\n      <button\n        type=\"submit\"\n        (click)=\"onSubmitForm()\"\n        [disabled]=\"snapForm.invalid\"\n      >\n        Enregistrer\n      </button>\n    </div>\n  </form>\n</div>\n<!-- Permet de creer un alias \"as\" pour les emissions de l'Observable, on va pouvoir utiliser faceSnap comme variable, comme si on avait un objet de faceSnap static, sauf que la ce sont les emissions de l'Observable, tout le template sera alors mah -->\n<!-- La syntaxe as faceSnap permet de stocker cette valeur sous le nom de faceSnap, utilisable dans le bloc. -->\n<!-- La syntaxe as faceSnap permet de stocker cette valeur sous le nom de faceSnap, utilisable dans le bloc. -->\n<div class=\"face-snap-card\" *ngIf=\"faceSnapPreview$ | async as faceSnap\">\n  <!-- *ngIf : Directive structurelle d'Angular\n       - *ngIf=\"faceSnapPreview$ | async as faceSnap\" vérifie si l'Observable `faceSnapPreview$` a émis une valeur.\n       - Le pipe `async` souscrit automatiquement à l'Observable et fournit la valeur émise.\n       - La valeur récupérée est stockée dans la variable locale `faceSnap` pour être utilisée dans ce bloc de code.\n    -->\n\n  <!-- Le titre du FaceSnap est affiché avec le pipe `uppercase` pour convertir le texte en majuscules. -->\n  <h2>{{ faceSnap.title | uppercase }}</h2>\n\n  <!-- La date de création du FaceSnap est formatée à l'aide du pipe `date`. \n       Le format \"longDate\" affiche une date complète (ex: 12 octobre 2024). -->\n  <p>Mise en ligne le {{ faceSnap.createdDate | date : \"longDate\" }}</p>\n\n  <!-- Affiche l'image du FaceSnap avec `src` lié dynamiquement à `faceSnap.imageUrl` et \n       `alt` à `faceSnap.title`, ce qui améliore l'accessibilité de l'image. -->\n  <img [src]=\"faceSnap.imageUrl\" [alt]=\"faceSnap.title\" />\n\n  <!-- Description du FaceSnap, avec le pipe `titlecase` pour mettre en majuscule la première lettre de chaque mot. -->\n  <p>{{ faceSnap.description | titlecase }}</p>\n\n  <!-- Vérifie si la location du FaceSnap est \"Paris\". Si oui, affiche un message indiquant que la photo a été prise à Paris. \n       Le *ngIf est une condition qui montre cet élément seulement si `faceSnap.location` vaut \"Paris\". -->\n  <p *ngIf=\"faceSnap.location === 'Paris'\">\n    Photo prise à {{ faceSnap.location }}\n  </p>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}